// When you interact with some of the doors in Black Space, you'll see a message that says "It's locked. You can't open it from this side."
export interface TSDeclaration {
    id: "function" | "const" | "var" | "let" | "interface" | "type" | "emtpy";
    name: string;
    func?: {
        params?: {name: string, type: string}[];
        returnType: string;
    };
    interface?: Record<string, string>;
    type?: string;
    readonly?: boolean;
    value?: string;
}

export interface TSTree {
    references?: {type: "types" | "path", value: string}[];
    imports?: string[];
    globals?: (TSDeclaration|string)[];
    modules?: {name: string; content: (TSDeclaration|string)[], globals?: (TSDeclaration|string)[] }[];
}

export class TSGenerator {
    declarations: {path: string, tree: TSTree}[] = [];
    paths: Record<string, string[]> = {};

    toString(file: string) {
        let tree: TSTree = {};
        let code = "// Generated by Buchta\n";

        for (const dec of this.declarations) {
            if (dec.path == file) {
                tree = dec.tree;
                break;
            }
        }

        for (const ref of tree.references ?? []) {
            code += `/// <reference ${ref.type}="${ref.value}" />\n`;
        }

        for (const imprt of tree.imports ?? []) {
            code += imprt + "\n";
        }

        if (tree.globals) {
            code += this.globalHandler({globals: tree.globals});
        }

        if (tree.modules) {
            for (const mod of tree.modules) {
                code += this.globalHandler({globals: mod.content, globals2: mod.globals ?? []}, mod.name);
            }
        }

        code += "export {};";

        return code;
    }

    private globalHandler(tree: {globals: (TSDeclaration|string)[], globals2?: (TSDeclaration|string)[]}, name = "global") {
        let code = "";
        if (name != "global") {
            code += `declare "${name}" {\n`;
        } else {
            code += "declare global {\n";
        }
        for (const glob of tree.globals ?? []) {
            if (typeof glob == "string") code += glob;
            else {
                code += "";
                if (glob.readonly) code += "readonly ";
                if (glob.id != "emtpy") {
                if (glob.id == "function") {
                    code += "function ";
                    code += glob.name + "(";
                    if (glob.func) {
                        for (const param of glob.func.params ?? []) {
                            code += `${param.name}: ${param.type}`;
                        }
                        code += `): ${glob.func.returnType};`;
                    } else {
                        code += ");"
                    }
                } else if (glob.id == "const" || glob.id == "var" || glob.id == "let") {
                    code += `${glob.id} ${glob.name}`;
                    if (glob.type) code += ": " + glob.type;
                    if (glob.value) code += ` = ${glob.value};`;
                    else code += ";";
                } else if (glob.id == "type") {
                    code += `type ${glob.name} = ${glob.value}`;
                } else if (glob.id == "interface") {
                    code += `interface ${glob.name} {\n`;
                    for (const key in glob.interface ?? {}) {
                        code += `${key}: ${glob.interface![key]}\n`
                    }
                    code += "}";
                }
            }
            code += "\n";
            }
        }
        if (tree.globals2) {
            code += this.globalHandler({globals: tree.globals2});
        }

        code += "}\n";
        return code;
    }

    tsconfigGen() {
        let code = "// Generated by buchta\n";
        const tsconfig = {
            "compilerOptions": {
                "lib": [
                    "ESNext"
                ],
                "forceConsistentCasingInFileNames": true,
                "jsx": "preserve",
                "target": "esnext",
                "module": "esnext",
                "moduleResolution": "nodenext",
                "skipLibCheck": true,
                "strict": true,
                "allowJs": true,
                "allowSyntheticDefaultImports": true,
                "types": [
                    "bun-types"
                ],
                "baseUrl": "..",
                "downlevelIteration": true
            },
            "include": [
                "./buchta.d.ts",
                "../**/*"
            ],
            "exclude": [
                "../dist"
            ]
        };

        code += JSON.stringify(tsconfig, null, 4);
        return code;
    }
}
